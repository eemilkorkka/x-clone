generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model verificationtokens {
  Id    Int    @id @default(autoincrement())
  Email String @unique(map: "Email") @db.VarChar(255)
  VerificationCode  Int?
  PasswordResetCode Int?
  PasswordResetCodeExpiry DateTime?
}

model users {
  UserID         Int         @id @default(autoincrement())
  Name           String      @db.VarChar(255)
  DisplayName    String      @db.VarChar(255)
  Email          String      @unique(map: "Email") @db.VarChar(255)
  BirthDateMonth String      @db.VarChar(255)
  BirthDateDay   String      @db.VarChar(255)
  BirthDateYear  String      @db.VarChar(255)
  Username       String      @unique(map: "Username") @db.VarChar(255)
  Password       String?     @db.VarChar(255)
  Location       String?     @db.VarChar(255)
  Website        String?     @db.VarChar(255)
  ProfilePicture String      @default("https://cloud.appwrite.io/v1/storage/buckets/67e599e6001b68a099f7/files/67e59ae30013a907b563/view?project=67e599cf000525d1eb9a") @db.VarChar(255)
  CoverPicture   String?     @db.VarChar(255)
  Bio            String?     @db.VarChar(255)
  created_at DateTime       @default(now()) @db.Timestamp(0)
  bookmarks      bookmarks[]
  likes          likes[]
  posts          posts[]
  retweets       retweets[]
  followers follows[] @relation("following")
  following follows[] @relation("follower")
}

model files {
  ID         Int             @id @default(autoincrement())
  PostID     Int
  File_URL   String          @db.VarChar(255)
  File_Type  files_File_Type
  created_at DateTime?       @default(now()) @db.Timestamp(0)
  posts      posts           @relation(fields: [PostID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "files_ibfk_1")

  @@index([PostID], map: "PostID")
}

model posts {
  ID         Int         @id @default(autoincrement())
  UserID     Int
  Content    String      @db.Text
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  ParentID   Int?
  bookmarks  bookmarks[]
  files      files[]
  likes      likes[]
  parent     posts?      @relation("PostToReplies", fields: [ParentID], references: [ID])
  replies    posts[]     @relation("PostToReplies")
  users      users       @relation(fields: [UserID], references: [UserID], onDelete: Cascade, onUpdate: NoAction, map: "posts_ibfk_1")
  retweets   retweets[]

  @@index([UserID], map: "UserID")
  @@index([ParentID], map: "posts_ParentID_fkey")
}

model likes {
  ID         Int       @id @default(autoincrement())
  UserID     Int
  PostID     Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  post       posts     @relation(fields: [PostID], references: [ID], onDelete: Cascade)
  user       users     @relation(fields: [UserID], references: [UserID], onDelete: Cascade)

  @@unique([UserID, PostID])
  @@index([UserID])
  @@index([PostID])
}

model bookmarks {
  ID         Int       @id @default(autoincrement())
  UserID     Int
  PostID     Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  post       posts     @relation(fields: [PostID], references: [ID], onDelete: Cascade)
  user       users     @relation(fields: [UserID], references: [UserID], onDelete: Cascade)

  @@unique([UserID, PostID])
  @@index([UserID])
  @@index([PostID])
}

model retweets {
  ID         Int       @id @default(autoincrement())
  UserID     Int
  PostID     Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  post       posts     @relation(fields: [PostID], references: [ID], onDelete: Cascade)
  user       users     @relation(fields: [UserID], references: [UserID], onDelete: Cascade)

  @@unique([UserID, PostID])
  @@index([UserID])
  @@index([PostID])
}

model follows {
  follower    users @relation("follower", fields: [followerId], references: [UserID])
  followerId  Int
  following   users @relation("following", fields: [followingId], references: [UserID])
  followingId Int

  @@id([followerId, followingId])
}

enum files_File_Type {
  image
  video
}
